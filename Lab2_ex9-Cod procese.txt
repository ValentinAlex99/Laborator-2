
#include <stdio.h>
#include <iostream>
#include <unistd.h>

#include "transfer_data.cpp"
 using namespace std;

int main()
{
  int pfd[2];
  int pid;
  transfer_data transfer_data;
 
  if(pipe(pfd)<0)
    {
      printf("Eroare la crearea pipe-ului\n");
      exit(1);
    }

  if((pid=fork())<0)
    {
      printf("Eroare la fork\n");
      exit(1);
    }
    
  if(pid==0) /* procesul fiu */
    {
     char buff_transmisie[80];
     close(pfd[0]); /* inchide capatul de citire; */
                     /* procesul va scrie in pipe  */
      cout<<"Citire date de transmis: ";cin>>buff_transmisie;
      transfer_data.write1(pfd[1],buff_transmisie);// transmiterea datei citite catre celelalt proces
      exit(0);
    }
    
  else /* procesul parinte */
    {
      char buff_primire[80];
      close(pfd[1]); /* inchide capatul de scriere; */
                     /* procesul va citi din pipe  */
                        
      transfer_data.read1(pfd[0],buff_primire);// citirea datei transmise
      exit(0);
    }
    return 0;
}
//-Fisier clasa transfer(transfer_data.cpp)------------------------------------------------------------------------//
#include <stdio.h>
#include <iostream>
#include <unistd.h>

using namespace std;
 
class transfer_data {
    public:
         void write1(const int& N, char A[80]){

     // ...
      write(N,A,80); /* operatie de scriere in pipe */
      //...
      close(N); /* la sfarsit inchide si capatul utilizat */
     }
     
  void read1(const int& N, char A[80]){
    read(N,A,80); /* operatie de citire din pipe */
    close(N); /* la sfarsit inchide si capatul utilizat */
    displey(A);
     }
     void displey(char A[80]){
         cout<<"Data primita la transfer: "<<A<<endl;
     }
};


